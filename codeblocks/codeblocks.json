{"https://github.com/orkes-io/workflow-cicd/blob/main/src/deploy_workflows.sh---1":"{`export response=\\`curl -s -X POST $CONDUCTOR_SERVER_URL/token -H 'Content-Type:application/json' -d '{\r\n\t\"keyId\": \"'\"$KEY\"'\",\r\n\t\"keySecret\": \"'\"$SECRET\"'\"\r\n}'\\`\r\n\r\nif [[ \"$response\" != *'token'* ]]; then\r\n  echo \"Unable to generate the auth header.  Please check KEY, SECRET and CONDUCTOR_SERVER_URL variables\"\r\n  echo \"Server response:\"\r\n  echo $response\r\n  exit 1\r\nfi\r\n\r\nexport token=\\`echo $response | cut -d '\"' -f4\\`\r\n\r\nfor FILE in main/resources/workflows/*;\r\n  do\r\n    echo \"Deploying @$FILE\";\r\n\r\n    curl -X POST $CONDUCTOR_SERVER_URL/metadata/workflow?overwrite=true \\\r\n         -H \"X-Authorization: $token\" \\\r\n         -H \"accept: */*\" \\\r\n         -H \"Content-Type: application/json\" \\\r\n         -d @$FILE\r\n  done\r\n\r`}","https://github.com/orkes-io/workflow-cicd/blob/main/src/deploy_workflows.sh---1-lines":"#L8-L32","https://github.com/conductor-sdk/orkes-java-springboot2-example/blob/main/src/main/java/io/orkes/example/banking/workers/ConductorWorkers.java---1":"{`\r\n    /**\r\n     * Note: Using this setting, up to 5 tasks will run in parallel, with tasks being polled every 200ms\r\n     */\r\n    @WorkerTask(value = \"fraud-check\", threadCount = 5, pollingInterval = 200)\r\n    public FraudCheckResult checkForFraudTask(DepositDetail depositDetail) {\r\n        return fraudCheckService.checkForFraud(depositDetail);\r\n    }\r\n\r`}","https://github.com/conductor-sdk/orkes-java-springboot2-example/blob/main/src/main/java/io/orkes/example/banking/workers/ConductorWorkers.java---1-lines":"#L27-L35","https://github.com/conductor-sdk/orkes-java-springboot2-example/blob/main/src/main/java/io/orkes/example/banking/workers/ConductorWorkers.java---2":"{`\r\n    @WorkerTask(value = \"retrieve-deposit-batch\", threadCount = 5, pollingInterval = 200)\r\n    public List<DepositDetail> retrieveDepositBatch(@InputParam(\"batchCount\") Integer batchCount) {\r\n        if (batchCount == null) {\r\n            batchCount = random.nextInt(5, 11);\r\n        }\r\n        batchCount = Math.min(100, batchCount); // Limit to 100 in playground\r\n        List<DepositDetail> depositDetails = IntStream.range(0, batchCount)\r\n                .mapToObj(i -> DepositDetail.builder()\r\n                        .accountId(\"acc-id-\" + i)\r\n                        .amount(BigDecimal.valueOf(i * 1500L)) // Create random amounts\r\n                        .build())\r\n                .toList();\r\n        log.info(\"Returning {} transactions\", depositDetails.size());\r\n        return depositDetails;\r\n    }\r\n\r`}","https://github.com/conductor-sdk/orkes-java-springboot2-example/blob/main/src/main/java/io/orkes/example/banking/workers/ConductorWorkers.java---2-lines":"#L40-L56","https://github.com/conductor-sdk/orkes-java-springboot2-example/blob/main/src/main/java/io/orkes/example/banking/service/WorkflowService.java---1":"{`\r\n        StartWorkflowRequest request = new StartWorkflowRequest();\r\n        request.setName(\"deposit_payment\");\r\n        Map<String, Object> inputData = new HashMap<>();\r\n        inputData.put(\"amount\", depositDetail.getAmount());\r\n        inputData.put(\"accountId\", depositDetail.getAccountId());\r\n        request.setInput(inputData);\r\n\r\n        String workflowId = workflowClient.startWorkflow(request);\r\n        log.info(\"Workflow id: {}\", workflowId);\r\n\r`}","https://github.com/conductor-sdk/orkes-java-springboot2-example/blob/main/src/main/java/io/orkes/example/banking/service/WorkflowService.java---1-lines":"#L22-L32","https://github.com/conductor-sdk/orkes-java-springboot2-example/blob/main/src/main/java/io/orkes/example/banking/controller/BankingApiController.java---1":"{`    @PostMapping(value = \"/triggerDepositFlow\", produces = \"application/json\")\r\n    public ResponseEntity<Map<String, Object>> triggerDepositFlow(@RequestBody DepositDetail depositDetail) {\r\n        log.info(\"Starting deposit flow for: {}\", depositDetail);\r\n        return ResponseEntity.ok(workflowService.startDepositWorkflow(depositDetail));\r\n    }\r\n\r`}","https://github.com/conductor-sdk/orkes-java-springboot2-example/blob/main/src/main/java/io/orkes/example/banking/controller/BankingApiController.java---1-lines":"#L32-L37"}